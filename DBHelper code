package datastore;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

    public class DBHelper extends SQLiteOpenHelper{
     
    //The Android's default system path of your application database.
    private static String DB_PATH = "/data/data/com.example.orbittrack/databases/";
   // Context.getFilesDir().getPath()
     
    private static String DB_NAME = "OrbitDb";
     
    private SQLiteDatabase myDataBase;
     
    private final Context myContext;
    private static int count=0;
     
    /**
      * Constructor
      * Takes and keeps a reference of the passed context in order to access to the application assets and resources.
      * @param context
      */
    public DBHelper(Context context) {
     
    super(context, DB_NAME, null, 1);
   // DB_PATH=context.getFilesDir().getPath();
    this.myContext = context;
    }	
     
    /**
      * Creates a empty database on the system and rewrites it with your own database.
      * */
    public void createDataBase() throws IOException{
     
   boolean dbExist = checkDataBase();
   // 	File dbExist = myContext.getDatabasePath(DB_NAME);
    if(dbExist){
    	Log.i(DB_NAME, Boolean.toString(dbExist));
    	Log.i(DB_NAME, Integer.toString(count));
    //do nothing - database already exist
    }else{
     count++;
    //By calling this method and empty database will be created into the default system path
    //of your application so we are gonna be able to overwrite that database with our database.
    //this.getReadableDatabase();
    SQLiteDatabase db = this.getReadableDatabase();
    if (db.isOpen()){
    	//use log //System.out.println("Hey");
    	Log.i(getDatabaseName(), "DB is open in create DB");
        db.close();
    } 
    try {
     Log.i(DB_NAME, "Calling copy database");
    copyDataBase();
    Log.i(getDatabaseName(), "DB copied successfully");
  // use log// System.out.println("Database copied");
     
    } catch (IOException e) {
    	Log.i(DB_PATH, "Cannot copy db");
    throw new Error("Error copying database");
     
    }
    }
     
    }
     
    /**
      * Check if the database already exist to avoid re-copying the file each time you open the application.
      * @return true if it exists, false if it doesn't
      */
    private boolean checkDataBase(){
     
    SQLiteDatabase checkDB = null;
     
    try{
    String myPath = DB_PATH + DB_NAME;
    checkDB = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READONLY);
     
    }catch(SQLiteException e){
     
    //database does't exist yet.
     
    }
     
    if(checkDB != null){
     
    checkDB.close();
     
    }
     
    return checkDB != null ? true : false;
    }
     
    /**
      * Copies your database from your local assets-folder to the just created empty database in the
      * system folder, from where it can be accessed and handled.
      * This is done by transfering bytestream.
      * */
    private void copyDataBase() throws IOException{
     
    //Open your local db as the input stream
    InputStream myInput = myContext.getAssets().open(DB_NAME);
     
    // Path to the just created empty db
    String outFileName = DB_PATH + DB_NAME;
     
    //Open the empty db as the output stream
    OutputStream myOutput = new FileOutputStream(outFileName);
     
    //transfer bytes from the inputfile to the outputfile
    byte[] buffer = new byte[1024];
    int length;
    while ((length = myInput.read(buffer))>0){
    myOutput.write(buffer, 0, length);
    }
     
    //Close the streams
    myOutput.flush();
    myOutput.close();
    myInput.close();
     
    }
     
    public void openDataBase() throws SQLException{
     
    //Open the database
    String myPath = DB_PATH + DB_NAME;
    myDataBase = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READONLY);
     
    }
     
    @Override
    public synchronized void close() {
     
    if(myDataBase != null)
    myDataBase.close();
     
    super.close();
     
    }
     
    

	@Override
	public void onCreate(SQLiteDatabase db) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub
		
	}
     
	public ArrayList<String>  getDataOrbit(String time,String time2,String am_pm,String bus,int day_of_week){

	    String Table_Name=bus;
	    String selectQuery="";
        ArrayList<String> list=new ArrayList<String>();
        //if(Table_Name.equals("Meast")||Table_Name.equals("venus_f")||Table_Name.equals("venus_back"))
        	
        if(Table_Name.equals("mwest")||Table_Name.equals("mwest_sun")||Table_Name.equals("mwest_sat"))
        	selectQuery = "SELECT  * FROM " + Table_Name +" WHERE Escalante between " +"'"+time +"'"+" and " +"'"+time2+"'"+" and Transit like "+"'%"+am_pm+"'";
       
        else
        	selectQuery = "SELECT  * FROM " + Table_Name +" WHERE Transit between " +"'"+time +"'"+" and " +"'"+time2+"'"+" and Transit like "+"'%"+am_pm+"'";
	   // this.close();
	          SQLiteDatabase db = this.getReadableDatabase();
	       //   if(db.isOpen())
	        //	  db.close();
	          Log.i(DB_NAME, "ready to exec query");
	    Cursor cursor = db.rawQuery(selectQuery, null);
	             //String[] data = null;
	    if (cursor.moveToFirst()) {
	        do {
	           // get  the  data into array,or class variable
	        	list.add(cursor.getString(1));
	        	list.add(cursor.getString(2));
	        	list.add(cursor.getString(3));
	        } while (cursor.moveToNext());
	    }
	    db.close();
	    return list;
	}
    // Add your public helper methods to access and get content from the database.
    // You could return cursors by doing "return myDataBase.query(....)" so it'd be easy
    // to you to create adapters for your views.
     
    }
