package com.example.orbittrack;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.parse.GetCallback;
import com.parse.Parse;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;

import android.app.Activity;
import android.app.AlertDialog;
import android.location.Address;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;
import android.widget.Toast;

public class GetLoc extends Activity implements LocationListener{

	private int mInterval = 5000;
	  LatLng currLocation; 
	  LatLng userLocation;
	  private GoogleMap map;
	  //private GoogleMap map;
	  private LocationManager locationManager;
	  Location location;
	  Marker bus;
	  Marker hamburg;
	  long mintime = 10000;
	  float mindist = 10;
	  Context cntxt = this;
	  Handler mHandler;
	  static String Lat;
	  static String Lng;
	  TextView txtlabel;
	  TextView distlabel;
	  TextView timelabel;
	  double latA=0.0;
	  double lngA=0.0;
	  double latB=0.0;
	  double lngB=0.0;
	  double distance;
      double speed = 20000; //15 miles per hour to meters per second
      int time=0;
      int minutes=0;
      int secs=0;
      String busname;
      
      //added to check the date and time for the bus
      String dtime;
      String[] datetime;
      String[] currtime;

	  Location locationA = new Location("point A");     
	  Location locationB = new Location("point B");     
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_get_loc);
		distlabel=(TextView) findViewById(R.id.textView2);
		//get the busname from mercury activity
		busname = getIntent().getStringExtra("busname");
		
		mHandler=new Handler();
        Parse.initialize(this, "gFgd64ShJ5ITtxItlwkJO7mTfdtfTIx4AvZHhriW", "12Sp82uQlUgUVp52sF6miUc5K8QkCk1X4Nrb3ogG");        
        map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map))
                .getMap();  
   
       /* Log.d("OnCreate", "Calling getLatLng()");
        getLatLng();*/
        Log.d("OnCreate","Calling GetLocation()");
        GetLocation();
        startRepeatingTask();
        	
	}//end oncreate
	
	Runnable mStatusChecker = new Runnable() {
        @Override 
        public void run() {
          getLatLng(); 
          mHandler.postDelayed(mStatusChecker, mInterval);
        }
      };
      
      void startRepeatingTask() {
    	    mStatusChecker.run(); 
    	  }
	
	public void getLatLng(){
			Log.d("LOG","Inside getLatLng()");
			//Parse.initialize(this, "gFgd64ShJ5ITtxItlwkJO7mTfdtfTIx4AvZHhriW", "12Sp82uQlUgUVp52sF6miUc5K8QkCk1X4Nrb3ogG");
		/*	ParseQuery<ParseObject> query = ParseQuery.getQuery("Test");
		    query.whereEqualTo("DName", "SGH-T399");
		    query.setLimit(1);*/
		    
			//Changed the code to work for the new parse class created in parse.com
		    ParseQuery<ParseObject> query = ParseQuery.getQuery("OrbitTrack");
		    query.whereEqualTo("BusName", busname);
		    query.setLimit(1);
		    
		    query.orderByDescending("updatedAt");
		    query.getFirstInBackground(new GetCallback<ParseObject>() {		  
		    	
				@Override
				public void done(ParseObject busobj, ParseException e) {
					// TODO Auto-generated method stub
					if (e == null) {
						
						//adding logic to split the datetime obtained from server and compare the current date and time.
				     	Calendar c = Calendar.getInstance();
				     	Date dt = c.getTime();
						String cdtime = dt.toString();
						currtime = cdtime.split(" ");
						dtime = busobj.getString("DateTime");
						datetime = dtime.split(" ");
						
						if ((currtime[1].equals(datetime[1]) ) && (currtime[2].equals(datetime[2])))  
						{

							Log.d("Inside getLatLng()","called get first record");
					
					    	time = 0;
					    	distance = 0;
							
							Lat = busobj.getString("Latitude");
							Lng = busobj.getString("Longitude");
							latA =  Double.valueOf(Lat);
							lngA = Double.valueOf(Lng); 
							locationA.setLatitude(latA);
							locationA.setLongitude(lngA);
							currLocation = new LatLng(latA, lngA);
							
							if (latB == 0.0){
								distlabel.setText("Please switch on your GPS to find the estimated time");
							}else{
								distance = locationA.distanceTo(locationB) ;
								time = (int)((distance *  60) / speed);
								
								distlabel.setText("Estimated time to reach you: "+ Integer.toString(time) +" minutes");
							}						
	                
							if (bus != null)
								bus.remove();
	               
							bus = map.addMarker(new MarkerOptions().position(currLocation)
									.title("Current Location").icon(BitmapDescriptorFactory.fromResource(R.drawable.bus) ));
	                
							float zoom = map.getCameraPosition().zoom;
							if (zoom < 14){
								zoom = 14;
								// Move the camera instantly to hamburg with a zoom of 15.
								map.moveCamera(CameraUpdateFactory.newLatLngZoom(currLocation, zoom));
								
								// Zoom in, animating the camera.
								map.animateCamera(CameraUpdateFactory.zoomTo(zoom), 10000, null); 
							}               
		                
							txtlabel = (TextView) findViewById(R.id.textView1);
		                
							Geocoder gcd = new Geocoder(cntxt, Locale.getDefault());
							try{
								List<Address> addresses = gcd.getFromLocation(latA, lngA, 1);
								if (addresses.size() > 0) 
								{
									txtlabel.setText("The Bus is at " + addresses.get(0).getAddressLine(0));
								}
							}catch(Exception ep){
		                	
							}
						}
		            } else {
		                //Log.d("score", "Error: " + e.getMessage());
		            	//Added toast to display that no information is available for the bus.
		            	//distlabel=(TextView) findViewById(R.id.textView2);
		            	distlabel.setText("Sorry there is no information");
		            	//Toast.makeText(getApplicationContext(), "", Toast.LENGTH_SHORT).show();
		            	
		            	mHandler.removeCallbacks(mStatusChecker);
		            }				
				}
		    });   
		    
	}
	
	
	public void GetLocation()
	{
		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);

        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, mintime, mindist, this);
        
        boolean isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);       
        
        if ( !isGpsEnabled){
        	AlertDialog.Builder gpsalert = new AlertDialog.Builder(cntxt);
        	gpsalert.setMessage("Want to Switch on GPS?")
				.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
				
				@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
					startActivityForResult(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS), 0);
					}
				})
				.setNegativeButton("No", new DialogInterface.OnClickListener() {
				
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub									
						Toast.makeText(getApplicationContext(), "Please switch on the GPS to view the location", Toast.LENGTH_LONG).show();
					}
				});
        		AlertDialog alertDialog = gpsalert.create();
        		alertDialog.show();        		
        }
	}

	
	@Override
    public void onLocationChanged(Location location) {    	
    	
        if(hamburg != null){
            hamburg.remove();
        }

       // double lat = 0;
        //double lng = 0;
        latB = location.getLatitude();
        lngB = location.getLongitude();
        locationB.setLatitude(latB);
        locationB.setLongitude(lngB);
        userLocation = new LatLng(latB, lngB);
       // UpdateLocationToServer(lat, lng);
       /* currLocation = new LatLng(latB, lngB);
        distance = locationA.distanceTo(locationB) ;
        time = (int)((distance *  60) / speed);*/
    	//secs=Integer.parseInt(Double.toString(time%60));

     /*   if(time>60)
        {
        	time=time/60;
        	minutes=Integer.parseInt(Double.toString(time));
        }*/
        //Log.d(Double.toString(latA),"value of lat outside done");        
        
        //timelabel=(TextView) findViewById(R.id.textView3);
        //timelabel.setText("Estimated time to reach you: "+Integer.toString(minutes) +" minutes and "+Integer.toString(secs)+" seconds");
        //timelabel.setText("Estimated time to reach you: "+Double.toString(time));
        hamburg = map.addMarker(new MarkerOptions().position(userLocation)
            		.title("Current Location"));
        
        float zoom = map.getCameraPosition().zoom;
        if (zoom < 14){
        	zoom = 14;
            // Move the camera instantly to hamburg with a zoom of 15.
            map.moveCamera(CameraUpdateFactory.newLatLngZoom(currLocation, zoom));

            // Zoom in, animating the camera.
            map.animateCamera(CameraUpdateFactory.zoomTo(zoom), 10000, null); 
        }                   
     
    }
	
	 @Override
		public void onResume(){
			super.onResume();	
			Log.d("OnResume","Resumed activity");
			boolean isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
			if (isGpsEnabled){
				GetLocation();
			}
		}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.get_loc, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	@Override
	protected void onPause() 
	{
		super.onPause();
		Log.d("OnPause","Activity Paused");
	};
	
	@Override
	protected void onStop() {
		super.onStop();
		Log.d("OnStop","Activity stopped");
	    mHandler.removeCallbacks(mStatusChecker);
	  };

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		
	}
}
